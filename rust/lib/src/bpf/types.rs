/* automatically generated by rust-bindgen 0.69.4 */

pub const MAX_FILENAME: u32 = 128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lw_creds {
    pub uid: u32,
    pub gid: u32,
    pub euid: u32,
    pub egid: u32,
}
#[test]
fn bindgen_test_layout_lw_creds() {
    const UNINIT: ::std::mem::MaybeUninit<lw_creds> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_creds>(),
        16usize,
        concat!("Size of: ", stringify!(lw_creds))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_creds>(),
        4usize,
        concat!("Alignment of ", stringify!(lw_creds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_creds),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_creds),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).euid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_creds),
            "::",
            stringify!(euid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).egid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_creds),
            "::",
            stringify!(egid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lw_task {
    pub pid: u32,
    pub tgid: u32,
    pub start_boottime: u64,
    pub ppid: u32,
    pub rpid: u32,
    pub str_flag: u64,
    pub filename: [u8; 128usize],
    pub interp: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_lw_task() {
    const UNINIT: ::std::mem::MaybeUninit<lw_task> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_task>(),
        288usize,
        concat!("Size of: ", stringify!(lw_task))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_task>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_task))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tgid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(tgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_boottime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(start_boottime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(ppid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rpid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(rpid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_flag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(str_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interp) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(interp)
        )
    );
}
#[doc = " Signal definitions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lw_signal_header {
    pub version: u16,
    pub type_: u16,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_lw_signal_header() {
    const UNINIT: ::std::mem::MaybeUninit<lw_signal_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_signal_header>(),
        8usize,
        concat!("Size of: ", stringify!(lw_signal_header))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_signal_header>(),
        4usize,
        concat!("Alignment of ", stringify!(lw_signal_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_signal_header),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_signal_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_signal_header),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lw_signal_task {
    pub header: lw_signal_header,
    pub creds: lw_creds,
    pub task: lw_task,
}
#[test]
fn bindgen_test_layout_lw_signal_task() {
    const UNINIT: ::std::mem::MaybeUninit<lw_signal_task> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_signal_task>(),
        312usize,
        concat!("Size of: ", stringify!(lw_signal_task))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_signal_task>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_signal_task))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_signal_task),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_signal_task),
            "::",
            stringify!(creds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_signal_task),
            "::",
            stringify!(task)
        )
    );
}
