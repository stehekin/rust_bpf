/* automatically generated by rust-bindgen 0.69.5 */

#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(dead_code)]

pub const BLOBSTR_LEN: u32 = 128;
pub const BLOB_SIZE: u32 = 1024;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __u32 = ::std::os::raw::c_uint;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type u8_ = __u8;
pub type u16_ = __u16;
pub type u32_ = __u32;
pub type u64_ = __u64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lw_blob_header {
    pub blob_size: u16_,
    pub effective_data_size: u16_,
    pub _reserved: u32_,
    pub blob_id: u64_,
    pub blob_next: u64_,
}
#[test]
fn bindgen_test_layout_lw_blob_header() {
    const UNINIT: ::std::mem::MaybeUninit<lw_blob_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_blob_header>(),
        24usize,
        concat!("Size of: ", stringify!(lw_blob_header))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_blob_header>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_blob_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blob_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blob_header),
            "::",
            stringify!(blob_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).effective_data_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blob_header),
            "::",
            stringify!(effective_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blob_header),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blob_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blob_header),
            "::",
            stringify!(blob_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blob_next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blob_header),
            "::",
            stringify!(blob_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lw_blob {
    pub header: lw_blob_header,
    pub data: [u8_; 1000usize],
}
#[test]
fn bindgen_test_layout_lw_blob() {
    const UNINIT: ::std::mem::MaybeUninit<lw_blob> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_blob>(),
        1024usize,
        concat!("Size of: ", stringify!(lw_blob))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_blob>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_blob))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blob),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blob),
            "::",
            stringify!(data)
        )
    );
}
impl Default for lw_blob {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lw_creds {
    pub uid: u32_,
    pub gid: u32_,
    pub euid: u32_,
    pub egid: u32_,
}
#[test]
fn bindgen_test_layout_lw_creds() {
    const UNINIT: ::std::mem::MaybeUninit<lw_creds> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_creds>(),
        16usize,
        concat!("Size of: ", stringify!(lw_creds))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_creds>(),
        4usize,
        concat!("Alignment of ", stringify!(lw_creds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_creds),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_creds),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).euid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_creds),
            "::",
            stringify!(euid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).egid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_creds),
            "::",
            stringify!(egid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lw_pid {
    pub pid: u32_,
    pub tgid: u32_,
    pub pid_ns: u32_,
    pub pid_vnr: u32_,
}
#[test]
fn bindgen_test_layout_lw_pid() {
    const UNINIT: ::std::mem::MaybeUninit<lw_pid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_pid>(),
        16usize,
        concat!("Size of: ", stringify!(lw_pid))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_pid>(),
        4usize,
        concat!("Alignment of ", stringify!(lw_pid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_pid),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tgid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_pid),
            "::",
            stringify!(tgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_pid),
            "::",
            stringify!(pid_ns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid_vnr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_pid),
            "::",
            stringify!(pid_vnr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lw_blobstr {
    pub str_: [u8_; 128usize],
    pub blob: lw_blobstr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lw_blobstr__bindgen_ty_1 {
    pub flag: u64_,
    pub blob_id: u64_,
}
#[test]
fn bindgen_test_layout_lw_blobstr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<lw_blobstr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_blobstr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(lw_blobstr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_blobstr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_blobstr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blobstr__bindgen_ty_1),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blob_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blobstr__bindgen_ty_1),
            "::",
            stringify!(blob_id)
        )
    );
}
#[test]
fn bindgen_test_layout_lw_blobstr() {
    const UNINIT: ::std::mem::MaybeUninit<lw_blobstr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_blobstr>(),
        128usize,
        concat!("Size of: ", stringify!(lw_blobstr))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_blobstr>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_blobstr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blobstr),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blob) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_blobstr),
            "::",
            stringify!(blob)
        )
    );
}
impl Default for lw_blobstr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lw_exec {
    pub filename: lw_blobstr,
    pub interp: lw_blobstr,
    pub cgroup_id: u64_,
    pub args: u64_,
    pub env: u64_,
}
#[test]
fn bindgen_test_layout_lw_exec() {
    const UNINIT: ::std::mem::MaybeUninit<lw_exec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_exec>(),
        280usize,
        concat!("Size of: ", stringify!(lw_exec))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_exec>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_exec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_exec),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interp) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_exec),
            "::",
            stringify!(interp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cgroup_id) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_exec),
            "::",
            stringify!(cgroup_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_exec),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).env) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_exec),
            "::",
            stringify!(env)
        )
    );
}
impl Default for lw_exec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lw_parent {
    pub pid: u32_,
    pub tgid: u32_,
    pub boot_ns: u64_,
}
#[test]
fn bindgen_test_layout_lw_parent() {
    const UNINIT: ::std::mem::MaybeUninit<lw_parent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_parent>(),
        16usize,
        concat!("Size of: ", stringify!(lw_parent))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_parent>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_parent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_parent),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tgid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_parent),
            "::",
            stringify!(tgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_parent),
            "::",
            stringify!(boot_ns)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lw_task {
    pub creds: lw_creds,
    pub pid: lw_pid,
    pub parent: lw_parent,
    pub session_id: u32_,
    pub login_uid: u32_,
    pub exec: lw_exec,
    pub boot_ns: u64_,
}
#[test]
fn bindgen_test_layout_lw_task() {
    const UNINIT: ::std::mem::MaybeUninit<lw_task> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_task>(),
        344usize,
        concat!("Size of: ", stringify!(lw_task))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_task>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_task))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).creds) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(creds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_id) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(session_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).login_uid) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(login_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exec) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(exec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot_ns) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_task),
            "::",
            stringify!(boot_ns)
        )
    );
}
impl Default for lw_task {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const lw_signal_type_LW_SIGNAL_TASK: lw_signal_type = 1;
pub type lw_signal_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lw_sigal_header {
    pub version: u8_,
    pub signal_type: u8_,
    pub cpu_id: u16_,
    pub _reserved: u32_,
    pub submit_time_ns: u64_,
}
#[test]
fn bindgen_test_layout_lw_sigal_header() {
    const UNINIT: ::std::mem::MaybeUninit<lw_sigal_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_sigal_header>(),
        16usize,
        concat!("Size of: ", stringify!(lw_sigal_header))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_sigal_header>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_sigal_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_sigal_header),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal_type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_sigal_header),
            "::",
            stringify!(signal_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_id) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_sigal_header),
            "::",
            stringify!(cpu_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_sigal_header),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submit_time_ns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_sigal_header),
            "::",
            stringify!(submit_time_ns)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lw_signal_task {
    pub header: lw_sigal_header,
    pub body: lw_task,
}
#[test]
fn bindgen_test_layout_lw_signal_task() {
    const UNINIT: ::std::mem::MaybeUninit<lw_signal_task> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lw_signal_task>(),
        360usize,
        concat!("Size of: ", stringify!(lw_signal_task))
    );
    assert_eq!(
        ::std::mem::align_of::<lw_signal_task>(),
        8usize,
        concat!("Alignment of ", stringify!(lw_signal_task))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_signal_task),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lw_signal_task),
            "::",
            stringify!(body)
        )
    );
}
impl Default for lw_signal_task {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
