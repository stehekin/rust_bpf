// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("probe_bpf")
            .map("_blob_index_", false)
            .map("_blob_ringbuf_", false)
            .map("probe_bp.rodata", false)
            .prog("bprm_committed_creds");
        builder.build()
    }
    pub struct OpenProbeMaps<'obj> {
        pub _blob_index_: libbpf_rs::OpenMapMut<'obj>,
        pub _blob_ringbuf_: libbpf_rs::OpenMapMut<'obj>,
        pub rodata: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenProbeMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut _blob_index_ = None;
            let mut _blob_ringbuf_ = None;
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "_blob_index_" => _blob_index_ = Some(map),
                    "_blob_ringbuf_" => _blob_ringbuf_ = Some(map),
                    "probe_bp.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                _blob_index_: _blob_index_.expect("map `_blob_index_` not present"),
                _blob_ringbuf_: _blob_ringbuf_.expect("map `_blob_ringbuf_` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct ProbeMaps<'obj> {
        pub _blob_index_: libbpf_rs::MapMut<'obj>,
        pub _blob_ringbuf_: libbpf_rs::MapMut<'obj>,
        pub rodata: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> ProbeMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut _blob_index_ = None;
            let mut _blob_ringbuf_ = None;
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "_blob_index_" => _blob_index_ = Some(map),
                    "_blob_ringbuf_" => _blob_ringbuf_ = Some(map),
                    "probe_bp.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                _blob_index_: _blob_index_.expect("map `_blob_index_` not present"),
                _blob_ringbuf_: _blob_ringbuf_.expect("map `_blob_ringbuf_` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenProbeProgs<'obj> {
        pub bprm_committed_creds: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenProbeProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut bprm_committed_creds = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "bprm_committed_creds" => bprm_committed_creds = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                bprm_committed_creds: bprm_committed_creds
                    .expect("prog `bprm_committed_creds` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct ProbeProgs<'obj> {
        pub bprm_committed_creds: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> ProbeProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenProbeProgs<'obj>) -> Self {
            Self {
                bprm_committed_creds: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.bprm_committed_creds.as_libbpf_object().as_mut(),
                    )
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct ProbeSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> ProbeSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenProbeSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenProbeSkel {
                maps: unsafe { OpenProbeMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenProbeProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for ProbeSkelBuilder {
        type Output = OpenProbeSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenProbeSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenProbeSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 6],
            pub key: *mut u32,
            pub value: *mut u64,
            pub max_entries: *mut [i32; 1],
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    key: std::ptr::null_mut(),
                    value: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_2 {
            pub r#type: *mut [i32; 27],
            pub max_entries: *mut [i32; 1048576],
        }
        impl Default for __anon_2 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct linux_binprm {
            pub file: *mut std::ffi::c_void,
            pub argc: i32,
            pub envc: i32,
            pub filename: *mut i8,
            pub interp: *mut i8,
        }
        impl Default for linux_binprm {
            fn default() -> Self {
                Self {
                    file: std::ptr::null_mut(),
                    argc: i32::default(),
                    envc: i32::default(),
                    filename: std::ptr::null_mut(),
                    interp: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub _license: [i8; 4],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub _blob_index_: __anon_1,
            pub _blob_ringbuf_: __anon_2,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
    }
    pub struct OpenProbeSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenProbeMaps<'obj>,
        pub progs: OpenProbeProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenProbeSkel<'obj> {
        type Output = ProbeSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<ProbeSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(ProbeSkel {
                maps: unsafe { ProbeMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: ProbeProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: ProbeLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct ProbeLinks {
        pub bprm_committed_creds: Option<libbpf_rs::Link>,
    }
    pub struct ProbeSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: ProbeMaps<'obj>,
        pub progs: ProbeProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: ProbeLinks,
    }

    unsafe impl Send for ProbeSkel<'_> {}
    unsafe impl Sync for ProbeSkel<'_> {}

    impl<'obj> Skel<'obj> for ProbeSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = ProbeLinks {
                bprm_committed_creds: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl ProbeSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 10, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 108, 115, 109, 47, 98, 112, 114, 109, 95, 99, 111, 109, 109, 105, 116, 116, 101,
        100, 95, 99, 114, 101, 100, 115, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112,
        115, 0, 46, 114, 111, 100, 97, 116, 97, 0, 112, 114, 111, 98, 101, 46, 98, 112, 102, 46,
        99, 0, 76, 66, 66, 48, 95, 50, 50, 0, 76, 66, 66, 48, 95, 51, 0, 76, 66, 66, 48, 95, 52, 0,
        99, 114, 101, 97, 116, 101, 95, 98, 108, 111, 98, 95, 105, 100, 46, 95, 95, 95, 95, 102,
        109, 116, 0, 99, 114, 101, 97, 116, 101, 95, 98, 108, 111, 98, 95, 105, 100, 46, 95, 95,
        95, 95, 102, 109, 116, 46, 49, 0, 99, 114, 101, 97, 116, 101, 95, 98, 108, 111, 98, 95,
        105, 100, 46, 95, 95, 95, 95, 102, 109, 116, 46, 50, 0, 99, 114, 101, 97, 116, 101, 95, 98,
        108, 111, 98, 95, 105, 100, 46, 95, 95, 95, 95, 102, 109, 116, 46, 51, 0, 76, 66, 66, 48,
        95, 50, 49, 0, 76, 66, 66, 48, 95, 54, 0, 76, 66, 66, 48, 95, 49, 53, 0, 76, 66, 66, 48,
        95, 49, 54, 0, 76, 66, 66, 48, 95, 49, 56, 0, 76, 66, 66, 48, 95, 49, 55, 0, 76, 66, 66,
        48, 95, 57, 0, 76, 66, 66, 48, 95, 50, 48, 0, 76, 66, 66, 48, 95, 49, 57, 0, 76, 66, 66,
        48, 95, 49, 48, 0, 98, 112, 114, 109, 95, 99, 111, 109, 109, 105, 116, 116, 101, 100, 95,
        99, 114, 101, 100, 115, 0, 95, 98, 108, 111, 98, 95, 105, 110, 100, 101, 120, 95, 0, 95,
        98, 108, 111, 98, 95, 114, 105, 110, 103, 98, 117, 102, 95, 0, 95, 108, 105, 99, 101, 110,
        115, 101, 0, 46, 114, 101, 108, 108, 115, 109, 47, 98, 112, 114, 109, 95, 99, 111, 109,
        109, 105, 116, 116, 101, 100, 95, 99, 114, 101, 100, 115, 0, 46, 66, 84, 70, 0, 46, 66, 84,
        70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 64, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 3, 0,
        32, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 3, 0, 144, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 3, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0,
        121, 0, 0, 0, 1, 0, 6, 0, 20, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
        1, 0, 6, 0, 42, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 1, 0, 6, 0, 62,
        0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0, 3, 0, 16, 6, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0, 0, 0, 0, 3, 0, 216, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 0, 3, 0, 112, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        219, 0, 0, 0, 0, 0, 3, 0, 120, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
        0, 0, 3, 0, 176, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 0, 0, 0, 0, 0, 3, 0,
        160, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 0, 0, 0, 3, 0, 120, 5, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 3, 0, 56, 6, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 3, 0, 48, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 10, 1, 0, 0, 0, 0, 3, 0, 144, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 0, 0, 18, 0, 3, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 72, 6, 0, 0, 0, 0, 0, 0, 39, 1, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 32, 0, 0, 0, 0, 0, 0, 0, 52, 1, 0, 0, 17, 0, 5, 0, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0,
        0, 0, 0, 0, 67, 1, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 121,
        17, 0, 0, 0, 0, 0, 0, 121, 24, 16, 0, 0, 0, 0, 0, 21, 8, 193, 0, 0, 0, 0, 0, 183, 1, 0, 0,
        0, 0, 0, 0, 99, 26, 248, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 248, 255,
        255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 191,
        6, 0, 0, 0, 0, 0, 0, 21, 6, 6, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 183, 2, 0, 0, 0, 1, 0, 0, 183, 3, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 131, 0, 0, 0, 85, 0,
        1, 0, 0, 0, 0, 0, 5, 0, 177, 0, 0, 0, 0, 0, 183, 1, 0, 0, 1, 0, 0, 0, 99, 16, 0, 0, 0, 0,
        0, 0, 123, 138, 200, 255, 0, 0, 0, 0, 121, 104, 0, 0, 0, 0, 0, 0, 191, 7, 0, 0, 0, 0, 0, 0,
        133, 0, 0, 0, 8, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0,
        20, 0, 0, 0, 191, 3, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 24, 1, 0, 0, 20, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 22, 0, 0, 0, 191, 131, 0, 0, 0, 0, 0, 0, 133, 0, 0,
        0, 6, 0, 0, 0, 24, 1, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 0, 0, 95, 24, 0, 0,
        0, 0, 0, 0, 133, 0, 0, 0, 8, 0, 0, 0, 191, 9, 0, 0, 0, 0, 0, 0, 103, 9, 0, 0, 48, 0, 0, 0,
        79, 137, 0, 0, 0, 0, 0, 0, 121, 168, 200, 255, 0, 0, 0, 0, 24, 1, 0, 0, 42, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 20, 0, 0, 0, 191, 147, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6,
        0, 0, 0, 24, 1, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 6, 0, 0, 0, 133,
        0, 0, 0, 6, 0, 0, 0, 123, 151, 8, 0, 0, 0, 0, 0, 183, 9, 0, 0, 0, 0, 0, 0, 123, 151, 16, 0,
        0, 0, 0, 0, 121, 97, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 1, 0, 0, 0, 123, 22, 0, 0, 0, 0, 0, 0,
        191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 248, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 191, 99, 0, 0, 0, 0, 0, 0, 183, 4, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 2, 0,
        0, 0, 191, 113, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 24, 0, 0, 0, 183, 2, 0, 0, 232, 0, 0, 0, 191,
        131, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 115, 0, 0, 0, 191, 113, 0, 0, 0, 0, 0, 0, 109, 9, 122,
        0, 0, 0, 0, 0, 183, 6, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 0, 0, 0, 0, 191, 19, 0, 0, 0, 0, 0,
        0, 183, 1, 0, 0, 0, 0, 0, 0, 123, 26, 216, 255, 0, 0, 0, 0, 5, 0, 77, 0, 0, 0, 0, 0, 183,
        2, 0, 0, 0, 4, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 3, 0, 0, 0, 0,
        0, 0, 133, 0, 0, 0, 131, 0, 0, 0, 85, 0, 2, 0, 0, 0, 0, 0, 121, 161, 224, 255, 0, 0, 0, 0,
        5, 0, 89, 0, 0, 0, 0, 0, 115, 112, 1, 0, 0, 0, 0, 0, 183, 1, 0, 0, 1, 0, 0, 0, 115, 16, 0,
        0, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 107, 16, 2, 0, 0, 0, 0, 0, 121, 104, 0, 0, 0, 0,
        0, 0, 123, 10, 232, 255, 0, 0, 0, 0, 133, 0, 0, 0, 8, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 20, 0, 0, 0, 191, 3, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6,
        0, 0, 0, 24, 1, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 22, 0, 0, 0, 191,
        131, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 24, 1, 0, 0, 255, 255, 255, 255, 0, 0, 0,
        0, 255, 255, 0, 0, 95, 24, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 8, 0, 0, 0, 191, 7, 0, 0, 0, 0,
        0, 0, 103, 7, 0, 0, 48, 0, 0, 0, 79, 135, 0, 0, 0, 0, 0, 0, 121, 168, 200, 255, 0, 0, 0, 0,
        24, 1, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 20, 0, 0, 0, 191, 115, 0,
        0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 24, 1, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        183, 2, 0, 0, 6, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 121, 161, 232, 255, 0, 0, 0, 0, 123,
        113, 8, 0, 0, 0, 0, 0, 121, 161, 232, 255, 0, 0, 0, 0, 183, 7, 0, 0, 0, 0, 0, 0, 123, 113,
        16, 0, 0, 0, 0, 0, 121, 97, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 1, 0, 0, 0, 123, 22, 0, 0, 0, 0,
        0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 191, 99, 0, 0, 0, 0, 0, 0, 183, 4, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
        2, 0, 0, 0, 121, 161, 232, 255, 0, 0, 0, 0, 121, 18, 8, 0, 0, 0, 0, 0, 121, 161, 224, 255,
        0, 0, 0, 0, 123, 33, 16, 0, 0, 0, 0, 0, 183, 2, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 132, 0, 0,
        0, 121, 161, 232, 255, 0, 0, 0, 0, 7, 1, 0, 0, 24, 0, 0, 0, 183, 2, 0, 0, 232, 0, 0, 0,
        191, 147, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 115, 0, 0, 0, 121, 161, 232, 255, 0, 0, 0, 0,
        121, 162, 216, 255, 0, 0, 0, 0, 7, 2, 0, 0, 1, 0, 0, 0, 123, 42, 216, 255, 0, 0, 0, 0, 191,
        19, 0, 0, 0, 0, 0, 0, 183, 6, 0, 0, 0, 0, 0, 0, 121, 162, 208, 255, 0, 0, 0, 0, 109, 7, 39,
        0, 0, 0, 0, 0, 107, 3, 2, 0, 0, 0, 0, 0, 183, 1, 0, 0, 232, 0, 0, 0, 45, 1, 41, 0, 0, 0, 0,
        0, 123, 58, 224, 255, 0, 0, 0, 0, 15, 32, 0, 0, 0, 0, 0, 0, 191, 7, 0, 0, 0, 0, 0, 0, 7, 7,
        0, 0, 255, 255, 255, 255, 191, 137, 0, 0, 0, 0, 0, 0, 15, 121, 0, 0, 0, 0, 0, 0, 191, 161,
        0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 247, 255, 255, 255, 183, 2, 0, 0, 1, 0, 0, 0, 191, 147, 0, 0,
        0, 0, 0, 0, 133, 0, 0, 0, 113, 0, 0, 0, 113, 161, 247, 255, 0, 0, 0, 0, 21, 1, 27, 0, 0, 0,
        0, 0, 121, 162, 216, 255, 0, 0, 0, 0, 87, 2, 0, 0, 255, 255, 0, 0, 121, 161, 224, 255, 0,
        0, 0, 0, 85, 2, 3, 0, 15, 0, 0, 0, 183, 2, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 132, 0, 0, 0, 5,
        0, 18, 0, 0, 0, 0, 0, 123, 122, 208, 255, 0, 0, 0, 0, 113, 23, 1, 0, 0, 0, 0, 0, 99, 106,
        252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0,
        21, 6, 152, 255, 0, 0, 0, 0, 183, 2, 0, 0, 0, 1, 0, 0, 21, 7, 145, 255, 0, 0, 0, 0, 21, 7,
        143, 255, 2, 0, 0, 0, 85, 7, 148, 255, 1, 0, 0, 0, 183, 2, 0, 0, 0, 2, 0, 0, 5, 0, 141,
        255, 0, 0, 0, 0, 183, 2, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 133, 0, 0, 0, 183, 0, 0, 0, 0, 0,
        0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 121, 163, 224, 255, 0, 0, 0, 0, 191, 49, 0, 0, 0, 0, 0, 0,
        5, 0, 230, 255, 0, 0, 0, 0, 71, 80, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 91, 68, 69, 66, 85, 71, 93, 32, 99, 112, 117, 95, 105, 100, 58, 32, 37,
        108, 100, 0, 91, 68, 69, 66, 85, 71, 93, 32, 115, 101, 113, 117, 101, 110, 99, 101, 58, 32,
        37, 108, 100, 0, 91, 68, 69, 66, 85, 71, 93, 32, 114, 101, 115, 117, 108, 116, 58, 32, 37,
        108, 100, 0, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 22, 0,
        0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 20, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0, 88, 1, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 20, 0, 0, 0, 128, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0, 224, 1, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 120, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0,
        240, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0, 24, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 20,
        0, 0, 0, 128, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0, 168, 3, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 20, 0, 0, 0, 24, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 184, 5, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 22, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 116, 3, 0, 0, 116, 3,
        0, 0, 254, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0,
        32, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 5, 0,
        0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 25, 0, 0, 0,
        0, 0, 0, 8, 7, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 1, 4, 0,
        0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 10, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 8, 11, 0, 0,
        0, 67, 0, 0, 0, 0, 0, 0, 8, 12, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 2, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0, 97, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        102, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 106, 0, 0, 0, 9, 0, 0, 0, 128, 0, 0, 0, 112, 0, 0,
        0, 13, 0, 0, 0, 192, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 2, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 27,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 2, 0, 0, 4, 16, 0, 0, 0, 97, 0, 0, 0, 17, 0, 0, 0,
        0, 0, 0, 0, 112, 0, 0, 0, 19, 0, 0, 0, 64, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 14, 21, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 152,
        0, 0, 0, 23, 0, 0, 0, 156, 0, 0, 0, 1, 0, 0, 12, 24, 0, 0, 0, 177, 0, 0, 0, 5, 0, 0, 4, 32,
        0, 0, 0, 190, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 195, 0, 0, 0, 2, 0, 0, 0, 64, 0, 0, 0, 200,
        0, 0, 0, 2, 0, 0, 0, 96, 0, 0, 0, 205, 0, 0, 0, 28, 0, 0, 0, 128, 0, 0, 0, 214, 0, 0, 0,
        28, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 29,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 30, 0, 0, 0, 221, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 30, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 226, 0, 0,
        0, 0, 0, 0, 14, 31, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 29, 0, 0, 0,
        4, 0, 0, 0, 20, 0, 0, 0, 235, 0, 0, 0, 0, 0, 0, 14, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 3, 0, 0, 0, 0, 29, 0, 0, 0, 4, 0, 0, 0, 22, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 14, 35, 0,
        0, 0, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 0, 14, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 0, 29, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 52, 1, 0, 0, 0, 0, 0, 14, 38, 0, 0, 0,
        0, 0, 0, 0, 190, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 207, 6, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0,
        32, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 215, 6, 0, 0, 2, 0, 0, 15, 48, 0, 0, 0, 16, 0, 0, 0,
        0, 0, 0, 0, 32, 0, 0, 0, 22, 0, 0, 0, 32, 0, 0, 0, 16, 0, 0, 0, 221, 6, 0, 0, 4, 0, 0, 15,
        68, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 36, 0, 0, 0, 20, 0, 0, 0, 22, 0, 0, 0,
        37, 0, 0, 0, 42, 0, 0, 0, 20, 0, 0, 0, 39, 0, 0, 0, 62, 0, 0, 0, 6, 0, 0, 0, 0, 105, 110,
        116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 117,
        105, 110, 116, 51, 50, 95, 116, 0, 95, 95, 117, 105, 110, 116, 51, 50, 95, 116, 0, 117,
        110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0, 117, 105, 110, 116, 54, 52, 95,
        116, 0, 95, 95, 117, 105, 110, 116, 54, 52, 95, 116, 0, 117, 110, 115, 105, 103, 110, 101,
        100, 32, 108, 111, 110, 103, 32, 108, 111, 110, 103, 0, 116, 121, 112, 101, 0, 107, 101,
        121, 0, 118, 97, 108, 117, 101, 0, 109, 97, 120, 95, 101, 110, 116, 114, 105, 101, 115, 0,
        95, 98, 108, 111, 98, 95, 105, 110, 100, 101, 120, 95, 0, 95, 98, 108, 111, 98, 95, 114,
        105, 110, 103, 98, 117, 102, 95, 0, 99, 116, 120, 0, 98, 112, 114, 109, 95, 99, 111, 109,
        109, 105, 116, 116, 101, 100, 95, 99, 114, 101, 100, 115, 0, 108, 105, 110, 117, 120, 95,
        98, 105, 110, 112, 114, 109, 0, 102, 105, 108, 101, 0, 97, 114, 103, 99, 0, 101, 110, 118,
        99, 0, 102, 105, 108, 101, 110, 97, 109, 101, 0, 105, 110, 116, 101, 114, 112, 0, 99, 104,
        97, 114, 0, 95, 108, 105, 99, 101, 110, 115, 101, 0, 99, 114, 101, 97, 116, 101, 95, 98,
        108, 111, 98, 95, 105, 100, 46, 95, 95, 95, 95, 102, 109, 116, 0, 99, 114, 101, 97, 116,
        101, 95, 98, 108, 111, 98, 95, 105, 100, 46, 95, 95, 95, 95, 102, 109, 116, 46, 49, 0, 99,
        114, 101, 97, 116, 101, 95, 98, 108, 111, 98, 95, 105, 100, 46, 95, 95, 95, 95, 102, 109,
        116, 46, 50, 0, 99, 114, 101, 97, 116, 101, 95, 98, 108, 111, 98, 95, 105, 100, 46, 95, 95,
        95, 95, 102, 109, 116, 46, 51, 0, 47, 114, 111, 111, 116, 47, 98, 112, 102, 47, 114, 117,
        115, 116, 47, 108, 105, 98, 47, 46, 46, 47, 46, 46, 47, 99, 47, 115, 114, 99, 47, 98, 112,
        114, 109, 95, 99, 111, 109, 109, 105, 116, 116, 101, 100, 95, 99, 114, 101, 100, 115, 47,
        112, 114, 111, 98, 101, 46, 98, 112, 102, 46, 99, 0, 105, 110, 116, 32, 66, 80, 70, 95, 80,
        82, 79, 71, 40, 98, 112, 114, 109, 95, 99, 111, 109, 109, 105, 116, 116, 101, 100, 95, 99,
        114, 101, 100, 115, 44, 32, 99, 111, 110, 115, 116, 32, 115, 116, 114, 117, 99, 116, 32,
        108, 105, 110, 117, 120, 95, 98, 105, 110, 112, 114, 109, 32, 42, 98, 112, 114, 109, 41,
        32, 123, 0, 32, 32, 99, 111, 112, 121, 95, 115, 116, 114, 95, 116, 111, 95, 98, 108, 111,
        98, 40, 98, 112, 114, 109, 45, 62, 102, 105, 108, 101, 110, 97, 109, 101, 44, 32, 38, 98,
        108, 111, 98, 95, 105, 100, 44, 32, 38, 115, 116, 114, 95, 108, 101, 110, 44, 32, 83, 73,
        90, 69, 95, 50, 53, 54, 41, 59, 0, 47, 114, 111, 111, 116, 47, 98, 112, 102, 47, 114, 117,
        115, 116, 47, 108, 105, 98, 47, 46, 46, 47, 46, 46, 47, 99, 47, 115, 114, 99, 47, 99, 111,
        109, 109, 111, 110, 47, 98, 108, 111, 98, 46, 104, 0, 32, 32, 105, 102, 32, 40, 33, 115,
        116, 114, 32, 124, 124, 32, 33, 98, 108, 111, 98, 95, 105, 100, 32, 124, 124, 32, 33, 115,
        116, 114, 95, 108, 101, 110, 41, 32, 123, 0, 32, 32, 117, 105, 110, 116, 51, 50, 95, 116,
        32, 122, 101, 114, 111, 32, 61, 32, 48, 59, 0, 32, 32, 117, 105, 110, 116, 54, 52, 95, 116,
        42, 32, 98, 108, 111, 98, 95, 105, 100, 32, 61, 32, 98, 112, 102, 95, 109, 97, 112, 95,
        108, 111, 111, 107, 117, 112, 95, 101, 108, 101, 109, 40, 38, 95, 98, 108, 111, 98, 95,
        105, 110, 100, 101, 120, 95, 44, 32, 38, 122, 101, 114, 111, 41, 59, 0, 32, 32, 105, 102,
        32, 40, 33, 98, 108, 111, 98, 95, 105, 100, 41, 32, 123, 0, 32, 32, 105, 102, 32, 40, 33,
        98, 108, 111, 98, 41, 32, 123, 0, 32, 32, 98, 108, 111, 98, 45, 62, 32, 118, 101, 114, 115,
        105, 111, 110, 32, 61, 32, 48, 120, 48, 49, 59, 0, 32, 32, 98, 108, 111, 98, 45, 62, 98,
        108, 111, 98, 95, 105, 100, 32, 61, 32, 99, 114, 101, 97, 116, 101, 95, 98, 108, 111, 98,
        95, 105, 100, 40, 42, 98, 108, 111, 98, 95, 105, 100, 41, 59, 0, 32, 32, 98, 112, 102, 95,
        112, 114, 105, 110, 116, 107, 40, 34, 91, 68, 69, 66, 85, 71, 93, 32, 99, 112, 117, 95,
        105, 100, 58, 32, 37, 108, 100, 34, 44, 32, 98, 112, 102, 95, 103, 101, 116, 95, 115, 109,
        112, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 105, 100, 40, 41, 41, 59, 0, 32,
        32, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 91, 68, 69, 66, 85, 71, 93, 32,
        115, 101, 113, 117, 101, 110, 99, 101, 58, 32, 37, 108, 100, 34, 44, 32, 118, 41, 59, 0,
        32, 32, 117, 105, 110, 116, 54, 52, 95, 116, 32, 114, 101, 115, 117, 108, 116, 32, 61, 32,
        32, 40, 118, 32, 38, 32, 48, 120, 48, 48, 48, 48, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
        70, 70, 41, 32, 124, 32, 40, 99, 112, 117, 95, 105, 100, 32, 60, 60, 32, 52, 56, 41, 59, 0,
        32, 32, 117, 105, 110, 116, 54, 52, 95, 116, 32, 99, 112, 117, 95, 105, 100, 32, 61, 32,
        98, 112, 102, 95, 103, 101, 116, 95, 115, 109, 112, 95, 112, 114, 111, 99, 101, 115, 115,
        111, 114, 95, 105, 100, 40, 41, 59, 0, 32, 32, 98, 112, 102, 95, 112, 114, 105, 110, 116,
        107, 40, 34, 91, 68, 69, 66, 85, 71, 93, 32, 114, 101, 115, 117, 108, 116, 58, 32, 37, 108,
        100, 34, 44, 32, 114, 101, 115, 117, 108, 116, 41, 59, 0, 32, 32, 98, 112, 102, 95, 112,
        114, 105, 110, 116, 107, 40, 34, 45, 45, 45, 45, 45, 34, 41, 59, 0, 32, 32, 98, 108, 111,
        98, 45, 62, 98, 108, 111, 98, 95, 110, 101, 120, 116, 32, 61, 32, 48, 59, 0, 32, 32, 42,
        98, 108, 111, 98, 95, 105, 100, 32, 61, 32, 42, 98, 108, 111, 98, 95, 105, 100, 32, 43, 32,
        49, 59, 0, 32, 32, 98, 112, 102, 95, 109, 97, 112, 95, 117, 112, 100, 97, 116, 101, 95,
        101, 108, 101, 109, 40, 38, 95, 98, 108, 111, 98, 95, 105, 110, 100, 101, 120, 95, 44, 32,
        38, 122, 101, 114, 111, 44, 32, 98, 108, 111, 98, 95, 105, 100, 44, 32, 66, 80, 70, 95, 65,
        78, 89, 41, 59, 0, 32, 32, 32, 32, 108, 111, 110, 103, 32, 108, 101, 110, 32, 61, 32, 98,
        112, 102, 95, 112, 114, 111, 98, 101, 95, 114, 101, 97, 100, 95, 107, 101, 114, 110, 101,
        108, 95, 115, 116, 114, 40, 98, 108, 111, 98, 45, 62, 100, 97, 116, 97, 44, 32, 115, 105,
        122, 101, 44, 32, 115, 116, 114, 32, 43, 32, 116, 111, 116, 97, 108, 95, 99, 111, 112, 105,
        101, 100, 41, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 108, 101, 110, 32, 60, 32, 48, 41,
        32, 123, 0, 32, 32, 98, 112, 102, 95, 114, 105, 110, 103, 98, 117, 102, 95, 115, 117, 98,
        109, 105, 116, 40, 98, 108, 111, 98, 44, 32, 48, 41, 59, 0, 32, 32, 98, 108, 111, 98, 45,
        62, 98, 108, 111, 98, 95, 115, 105, 122, 101, 32, 61, 32, 98, 108, 111, 98, 95, 115, 105,
        122, 101, 59, 0, 32, 32, 98, 108, 111, 98, 45, 62, 100, 97, 116, 97, 95, 115, 105, 122,
        101, 32, 61, 32, 48, 59, 0, 32, 32, 32, 32, 98, 108, 111, 98, 45, 62, 98, 108, 111, 98, 95,
        110, 101, 120, 116, 32, 61, 32, 110, 101, 120, 116, 45, 62, 98, 108, 111, 98, 95, 105, 100,
        59, 0, 32, 32, 102, 111, 114, 32, 40, 117, 105, 110, 116, 49, 54, 95, 116, 32, 105, 32, 61,
        32, 48, 59, 32, 105, 32, 60, 32, 77, 65, 88, 95, 66, 76, 79, 66, 83, 32, 38, 38, 32, 98,
        108, 111, 98, 59, 32, 105, 43, 43, 41, 32, 123, 0, 32, 32, 32, 32, 98, 108, 111, 98, 45,
        62, 100, 97, 116, 97, 95, 115, 105, 122, 101, 32, 61, 32, 108, 101, 110, 59, 0, 32, 32, 32,
        32, 105, 102, 32, 40, 108, 101, 110, 32, 60, 32, 115, 105, 122, 101, 41, 32, 123, 0, 32,
        32, 32, 32, 98, 112, 102, 95, 112, 114, 111, 98, 101, 95, 114, 101, 97, 100, 95, 107, 101,
        114, 110, 101, 108, 40, 38, 108, 97, 115, 116, 44, 32, 49, 44, 32, 115, 116, 114, 32, 43,
        32, 116, 111, 116, 97, 108, 95, 99, 111, 112, 105, 101, 100, 41, 59, 0, 32, 32, 32, 32,
        105, 102, 32, 40, 108, 97, 115, 116, 32, 61, 61, 32, 48, 41, 32, 123, 0, 32, 32, 32, 32,
        105, 102, 32, 40, 105, 32, 61, 61, 32, 77, 65, 88, 95, 66, 76, 79, 66, 83, 32, 45, 32, 49,
        41, 32, 123, 0, 32, 32, 108, 119, 95, 98, 108, 111, 98, 32, 42, 110, 101, 120, 116, 32, 61,
        32, 114, 101, 115, 101, 114, 118, 101, 95, 98, 108, 111, 98, 40, 98, 108, 111, 98, 45, 62,
        98, 108, 111, 98, 95, 115, 105, 122, 101, 41, 59, 0, 32, 32, 115, 119, 105, 116, 99, 104,
        32, 40, 98, 108, 111, 98, 95, 115, 105, 122, 101, 41, 32, 123, 0, 32, 32, 98, 112, 102, 95,
        114, 105, 110, 103, 98, 117, 102, 95, 100, 105, 115, 99, 97, 114, 100, 40, 98, 108, 111,
        98, 44, 32, 48, 41, 59, 0, 48, 58, 51, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97,
        112, 115, 0, 46, 114, 111, 100, 97, 116, 97, 0, 108, 115, 109, 47, 98, 112, 114, 109, 95,
        99, 111, 109, 109, 105, 116, 116, 101, 100, 95, 99, 114, 101, 100, 115, 0, 0, 0, 0, 0, 0,
        0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 236, 4, 0, 0, 0, 5,
        0, 0, 28, 0, 0, 0, 8, 0, 0, 0, 229, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 16, 0, 0,
        0, 229, 6, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 77, 1, 0, 0, 141, 1, 0, 0, 5, 76, 0, 0, 8, 0, 0,
        0, 77, 1, 0, 0, 211, 1, 0, 0, 26, 88, 0, 0, 16, 0, 0, 0, 21, 2, 0, 0, 66, 2, 0, 0, 12, 32,
        2, 0, 32, 0, 0, 0, 21, 2, 0, 0, 104, 2, 0, 0, 12, 220, 0, 0, 48, 0, 0, 0, 21, 2, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 21, 2, 0, 0, 125, 2, 0, 0, 23, 224, 0, 0, 88, 0, 0, 0,
        21, 2, 0, 0, 190, 2, 0, 0, 7, 228, 0, 0, 96, 0, 0, 0, 21, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        136, 0, 0, 0, 21, 2, 0, 0, 208, 2, 0, 0, 7, 60, 1, 0, 160, 0, 0, 0, 21, 2, 0, 0, 223, 2, 0,
        0, 18, 76, 1, 0, 176, 0, 0, 0, 21, 2, 0, 0, 248, 2, 0, 0, 34, 88, 1, 0, 192, 0, 0, 0, 21,
        2, 0, 0, 36, 3, 0, 0, 3, 168, 0, 0, 240, 0, 0, 0, 21, 2, 0, 0, 101, 3, 0, 0, 3, 172, 0, 0,
        40, 1, 0, 0, 21, 2, 0, 0, 143, 3, 0, 0, 25, 184, 0, 0, 48, 1, 0, 0, 21, 2, 0, 0, 207, 3, 0,
        0, 21, 180, 0, 0, 64, 1, 0, 0, 21, 2, 0, 0, 143, 3, 0, 0, 57, 184, 0, 0, 72, 1, 0, 0, 21,
        2, 0, 0, 143, 3, 0, 0, 47, 184, 0, 0, 88, 1, 0, 0, 21, 2, 0, 0, 255, 3, 0, 0, 3, 188, 0, 0,
        128, 1, 0, 0, 21, 2, 0, 0, 44, 4, 0, 0, 3, 192, 0, 0, 160, 1, 0, 0, 21, 2, 0, 0, 248, 2, 0,
        0, 17, 88, 1, 0, 176, 1, 0, 0, 21, 2, 0, 0, 67, 4, 0, 0, 19, 92, 1, 0, 184, 1, 0, 0, 21, 2,
        0, 0, 90, 4, 0, 0, 14, 100, 1, 0, 192, 1, 0, 0, 21, 2, 0, 0, 90, 4, 0, 0, 23, 100, 1, 0,
        200, 1, 0, 0, 21, 2, 0, 0, 90, 4, 0, 0, 12, 100, 1, 0, 216, 1, 0, 0, 21, 2, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 224, 1, 0, 0, 21, 2, 0, 0, 117, 4, 0, 0, 3, 108, 1, 0, 8, 2, 0, 0, 21, 2, 0,
        0, 180, 4, 0, 0, 42, 164, 2, 0, 24, 2, 0, 0, 21, 2, 0, 0, 180, 4, 0, 0, 16, 164, 2, 0, 56,
        2, 0, 0, 21, 2, 0, 0, 4, 5, 0, 0, 9, 168, 2, 0, 120, 2, 0, 0, 21, 2, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 152, 2, 0, 0, 21, 2, 0, 0, 208, 2, 0, 0, 7, 60, 1, 0, 160, 2, 0, 0, 21, 2, 0, 0,
        23, 5, 0, 0, 3, 136, 1, 0, 176, 2, 0, 0, 21, 2, 0, 0, 54, 5, 0, 0, 19, 80, 1, 0, 184, 2, 0,
        0, 21, 2, 0, 0, 223, 2, 0, 0, 18, 76, 1, 0, 208, 2, 0, 0, 21, 2, 0, 0, 85, 5, 0, 0, 19, 84,
        1, 0, 216, 2, 0, 0, 21, 2, 0, 0, 248, 2, 0, 0, 34, 88, 1, 0, 232, 2, 0, 0, 21, 2, 0, 0, 36,
        3, 0, 0, 3, 168, 0, 0, 24, 3, 0, 0, 21, 2, 0, 0, 101, 3, 0, 0, 3, 172, 0, 0, 64, 3, 0, 0,
        21, 2, 0, 0, 143, 3, 0, 0, 25, 184, 0, 0, 88, 3, 0, 0, 21, 2, 0, 0, 207, 3, 0, 0, 21, 180,
        0, 0, 104, 3, 0, 0, 21, 2, 0, 0, 143, 3, 0, 0, 57, 184, 0, 0, 112, 3, 0, 0, 21, 2, 0, 0,
        143, 3, 0, 0, 47, 184, 0, 0, 128, 3, 0, 0, 21, 2, 0, 0, 255, 3, 0, 0, 3, 188, 0, 0, 168, 3,
        0, 0, 21, 2, 0, 0, 44, 4, 0, 0, 3, 192, 0, 0, 200, 3, 0, 0, 21, 2, 0, 0, 248, 2, 0, 0, 17,
        88, 1, 0, 216, 3, 0, 0, 21, 2, 0, 0, 67, 4, 0, 0, 19, 92, 1, 0, 240, 3, 0, 0, 21, 2, 0, 0,
        90, 4, 0, 0, 14, 100, 1, 0, 248, 3, 0, 0, 21, 2, 0, 0, 90, 4, 0, 0, 23, 100, 1, 0, 0, 4, 0,
        0, 21, 2, 0, 0, 90, 4, 0, 0, 12, 100, 1, 0, 16, 4, 0, 0, 21, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 24, 4, 0, 0, 21, 2, 0, 0, 117, 4, 0, 0, 3, 108, 1, 0, 64, 4, 0, 0, 21, 2, 0, 0, 108, 5,
        0, 0, 29, 200, 1, 0, 88, 4, 0, 0, 21, 2, 0, 0, 108, 5, 0, 0, 21, 200, 1, 0, 96, 4, 0, 0,
        21, 2, 0, 0, 23, 5, 0, 0, 3, 136, 1, 0, 112, 4, 0, 0, 21, 2, 0, 0, 180, 4, 0, 0, 42, 164,
        2, 0, 128, 4, 0, 0, 21, 2, 0, 0, 180, 4, 0, 0, 16, 164, 2, 0, 160, 4, 0, 0, 21, 2, 0, 0,
        145, 5, 0, 0, 48, 60, 2, 0, 208, 4, 0, 0, 21, 2, 0, 0, 4, 5, 0, 0, 9, 168, 2, 0, 216, 4, 0,
        0, 21, 2, 0, 0, 198, 5, 0, 0, 21, 188, 2, 0, 224, 4, 0, 0, 21, 2, 0, 0, 225, 5, 0, 0, 9,
        196, 2, 0, 248, 4, 0, 0, 21, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 5, 0, 0, 21, 2, 0, 0,
        247, 5, 0, 0, 41, 220, 2, 0, 40, 5, 0, 0, 21, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 5, 0, 0,
        21, 2, 0, 0, 247, 5, 0, 0, 5, 220, 2, 0, 72, 5, 0, 0, 21, 2, 0, 0, 48, 6, 0, 0, 9, 228, 2,
        0, 80, 5, 0, 0, 21, 2, 0, 0, 48, 6, 0, 0, 9, 228, 2, 0, 88, 5, 0, 0, 21, 2, 0, 0, 69, 6, 0,
        0, 11, 252, 2, 0, 112, 5, 0, 0, 21, 2, 0, 0, 69, 6, 0, 0, 9, 252, 2, 0, 120, 5, 0, 0, 21,
        2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 5, 0, 0, 21, 2, 0, 0, 99, 6, 0, 0, 38, 192, 1, 0,
        160, 5, 0, 0, 21, 2, 0, 0, 104, 2, 0, 0, 12, 220, 0, 0, 176, 5, 0, 0, 21, 2, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 184, 5, 0, 0, 21, 2, 0, 0, 125, 2, 0, 0, 23, 224, 0, 0, 216, 5, 0, 0, 21, 2,
        0, 0, 190, 2, 0, 0, 7, 228, 0, 0, 232, 5, 0, 0, 21, 2, 0, 0, 148, 6, 0, 0, 3, 252, 0, 0,
        16, 6, 0, 0, 21, 2, 0, 0, 171, 6, 0, 0, 3, 152, 1, 0, 32, 6, 0, 0, 77, 1, 0, 0, 141, 1, 0,
        0, 5, 76, 0, 0, 56, 6, 0, 0, 21, 2, 0, 0, 23, 5, 0, 0, 3, 136, 1, 0, 16, 0, 0, 0, 229, 6,
        0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 26, 0, 0, 0, 203, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 0, 0, 119, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
        1, 0, 0, 0, 0, 0, 0, 88, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
        0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 16, 4, 0, 0, 0, 0, 0, 0, 72, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 88, 10, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 10, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 1, 0, 0, 0,
        2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 10, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 1, 0,
        0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 10, 0, 0, 0, 0, 0, 0,
        224, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
        0, 0, 0, 105, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 11,
        0, 0, 0, 0, 0, 0, 138, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 72, 22, 0, 0, 0, 0, 0, 0, 60, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
